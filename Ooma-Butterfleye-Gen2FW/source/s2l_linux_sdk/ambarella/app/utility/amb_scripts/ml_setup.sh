#!/bin/sh
##########################
# History:
#	2017/07/31 - [Tao Wu] Create file
#
# Copyright (c) 2017 Ambarella, Inc.
#
# This file and its contents ("Software") are protected by intellectual
# property rights including, without limitation, U.S. and/or foreign
# copyrights. This Software is also the confidential and proprietary
# information of Ambarella, Inc. and its licensors. You may not use, reproduce,
# disclose, distribute, modify, or otherwise prepare derivative works of this
# Software or any portion thereof except pursuant to a signed license agreement
# or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
# In the absence of such an agreement, you agree to promptly notify and return
# this Software to Ambarella, Inc.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
###############
ML_SETUP_VERSION="0.0.2"

mode=$1

############# Configuration it ###############
DEVICE=wlan0
DIR_CONFIG=/tmp/config
IP_CONFIG=$DIR_CONFIG/ip.conf
############# Exit Error Number ###############
ERRNO_OK=0
ERRNO_PARAM=1
ERRNO_ENV=2
ERRNO_SSID_NOT_FOUND=3
#ERRNO_PASSWORD_WRONG=4
#ERRNO_SSID_REPEATED=5
############# Marvel WiFi module CONFIG ###############
MRVL_CONFIG=$DIR_CONFIG/mrvl.conf

#############  Basic Function ##################
usages()
{
	echo "Version: ${ML_SETUP_VERSION}"
	echo "This script used to Setup/Stop WiFi STA/AP mode with mlanutl tools which from Marvell"
	echo "usage:                      $0 [sta|ap] <SSID> <Password|0> [open|wpa2|wpa|wpawpa2|wep|0] <Channel>"
	echo ""
	echo "Example:"
	echo "Connect To AP[open]:        $0 sta <SSID>"
	echo "Connect To AP[encrypt]:     $0 sta <SSID> <Password>"
	echo "Connect To Hidden[open]:    $0 sta <SSID>"
	echo "Connect To Hidden[encrypt]: $0 sta <SSID> <Password>"
	echo "Setup AP[open]:             $0 ap  <SSID>     0       open              <Channel>"
	echo "Setup AP[encrypt]:          $0 ap  <SSID> <Password> [wpa2|wpa|wpawpa2] <Channel>"
	echo ""
	echo "Stop STA/AP mode:           $0 stop"

	exit $ERRNO_OK
}

check_env()
{
	if [ "$(which mlanutl)" = "" ]; then
		echo "Not Found mlanutl tools"
		exit $ERRNO_ENV
	fi
}

check_iface()
{
	iface=$1
	if [ "$(ifconfig "$iface")" = "" ]; then
		echo "Not Found Interface $iface"
		exit $ERRNO_ENV
	fi
}

kill_apps()
{
	#the max times to kill app
	local KILL_NUM_MAX=10

	for app in "$@"
	do
		local kill_num=0
		while [ "$(pgrep "${app}")" != "" ]
		do
			if [ $kill_num -ge $KILL_NUM_MAX ]; then
				echo "Please try execute \"killall ${app}\" by yourself"
				exit $ERRNO_ENV
			else
				killall -9 "${app}"
				sleep 1
			fi
			kill_num=$((kill_num + 1));
		done
	done
}
################ Driver #####################

get_device_id()
{
	MODULE_ID=UNKNOWN
	if [ -e /sys/module/mlan ]; then
		MODULE_ID=MRVL
	fi
}

################   IP address / DNS  ###################
generate_dns_conf()
{
	echo "#  DO NOT EDIT THIS FILE BY HAND " > /etc/resolv.conf
	for i in "$@"; do
		echo "nameserver $i" >> /etc/resolv.conf
	done
}

generate_ip_conf()
{
# Generate ip.conf
#ip_addr:192.168.1.28
#Bcast:192.168.1.255
#Mask:255.255.255.0
#Gateway:192.168.1.1
	echo "$2"
	echo "ip_$2" > $IP_CONFIG
	echo "$3"
	echo "$3" >> $IP_CONFIG
	echo "$4"
	echo "$4" >> $IP_CONFIG
	gw=$(route -n |grep ${DEVICE} |awk 'NR==1{print $2}')
	echo "Gateway:$gw" >> $IP_CONFIG
}

get_ip_address()
{
# Get IP Address, 1. DHCP 2. Static IP
	if [ -f $IP_CONFIG ]; then
		LOCAL_IP=$(grep ip_addr ${IP_CONFIG})
		LOCAL_IP=${LOCAL_IP##*:}
		BCAST=$(grep Bcast ${IP_CONFIG})
		BCAST=${BCAST##*:}
		MASK=$(grep Mask ${IP_CONFIG})
		MASK=${MASK##*:}
		GATEWAY=$(grep Gateway ${IP_CONFIG})
		GATEWAY=${GATEWAY##*:}
		echo "Static IP: $LOCAL_IP "
		echo "Broad Cast: $BCAST "
		echo "Net Mask: $MASK "
		echo "Gate Way: $GATEWAY "
		ifconfig ${DEVICE} "${LOCAL_IP}" broadcast "${BCAST}" netmask "${MASK}"
		route add default gw "${GATEWAY}" ${DEVICE}
	else
		dns_server=$(udhcpc -i${DEVICE} -A 1 -b 2>&1 |grep dns|awk '{print $3}')
		generate_dns_conf "${dns_server}"
		local_ip_config=$(ifconfig ${DEVICE} | grep "inet addr" | cut -c 11-)
		generate_ip_conf ${local_ip_config}
	fi
}
################  mlanutl Utility ###################

start_ml()
{
	ifconfig ${DEVICE} up
}

stop_ml()
{
	kill_apps udhcpc
	mlanutl ${DEVICE} passphrase "2"
	ifconfig ${DEVICE} down
}

################  mlanutl STA ###################
ml_scan_results()
{
	local	local_ssid="$1"

	scan_result=$(mlanutl ${DEVICE} setuserscan ssid="${local_ssid}")
	scan_no_result=$(echo "${scan_result}" | grep 'No Scan Results')

	if [ "${scan_no_result}" != "" ]; then
		echo "Can not find SSID [${local_ssid}]"
		exit $ERRNO_SSID_NOT_FOUND
	fi
	echo "$scan_result"
}

ml_connect_ap()
{
	local	local_ssid="$1"
	local	local_passwd="$2"

	mkdir -p $DIR_CONFIG

	if [ "${local_passwd}"  != "" ]; then
		local len_passwd=${#local_passwd}
		if [ "$len_passwd" -eq 64 ]; then
			echo "passphrase length is 64, using hex type"
			mlanutl ${DEVICE} passphrase "1;ssid=${local_ssid};psk=${local_passwd}"
		else
			mlanutl ${DEVICE} passphrase "1;ssid=${local_ssid};passphrase=${local_passwd}"
		fi
	else
		mlanutl ${DEVICE} passphrase "2;ssid=${local_ssid}"
	fi
	mlanutl ${DEVICE} assocessid "${local_ssid}"
}

ml_check_status()
{
	## the max times to check ml status
	local CONNECT_NUM_MAX=80
	local CHECK_INTERVAL=0.5

	local connect_num=0
	local connect_sleep_num=$((CONNECT_NUM_MAX/2))

	#sleep 5
	while [ $connect_num -lt $CONNECT_NUM_MAX ]
	do
		ml_status=$(grep media_state /proc/mwlan/${DEVICE}/info)
		ml_status_value=${ml_status#*media_state=}
		ml_status_value=$(echo "${ml_status_value}" | sed -r 's/.*"(.+)".*/\1/')
		#echo ${ml_status_value}
		if [ "${ml_status_value}" = "Connected" ]; then
			break
		fi

		connect_num=$((connect_num + 1));
		if [ $connect_num -gt $connect_sleep_num ]; then
			printf "%s" '.'
			sleep $CHECK_INTERVAL
		fi
	done

	echo "Check time [${connect_num}/${CONNECT_NUM_MAX} x ${CHECK_INTERVAL}], ml_status:"
	echo "${ml_status}"
	echo "=============================================="

	get_ip_address

	echo "ml_setup Finished"
}

clear_config()
{
	rm -rf ${IP_CONFIG}
}
################   Main  ###################

## Show usage when no parameter
if [ $# -eq 0 ]; then
	usages
fi

## Setup new config before clear old one
if [ $# -gt 1 ]; then
	clear_config
fi

check_env
get_device_id

case ${mode} in
	"stop")
		stop_ml
		;;
	sta)
		sta_ssid=$2
		sta_password=$3
		check_iface "${DEVICE}"
		ml_scan_results "${sta_ssid}"
		ml_connect_ap "${sta_ssid}" "${sta_password}"
		ml_check_status
		;;
	ap)
		echo "Not implement yet, exit."
		exit $ERRNO_PARAM
		;;
	*)
		echo "Please Select Mode [sta|ap] or stop"
		exit $ERRNO_PARAM
		;;
esac

########################################
