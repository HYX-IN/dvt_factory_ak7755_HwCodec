diff --git a/AmbaConfig b/AmbaConfig
index 00c6423..2772e5b 100644
--- a/AmbaConfig
+++ b/AmbaConfig
@@ -4,16 +4,32 @@
 ## History:
 ##    2014/12/04 - [Tao Wu] Create
 ##
-## Copyright (C) 2012-2016, Ambarella, Inc.
+## Copyright (c) 2016 Ambarella, Inc.
 ##
-## All rights reserved. No Part of this file may be reproduced, stored
-## in a retrieval system, or transmitted, in any form, or by any means,
-## electronic, mechanical, photocopying, recording, or otherwise,
-## without the prior consent of Ambarella, Inc.
+## This file and its contents ("Software") are protected by intellectual
+## property rights including, without limitation, U.S. and/or foreign
+## copyrights. This Software is also the confidential and proprietary
+## information of Ambarella, Inc. and its licensors. You may not use, reproduce,
+## disclose, distribute, modify, or otherwise prepare derivative works of this
+## Software or any portion thereof except pursuant to a signed license agreement
+## or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
+## In the absence of such an agreement, you agree to promptly notify and return
+## this Software to Ambarella, Inc.
+##
+## THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+## INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
+## MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+## IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
+## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+## LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
+## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+## POSSIBILITY OF SUCH DAMAGE.
 ##
 
 config CONFIG_AMBARELLA_PRELOAD_IDSP
-	depends on CONFIG_ARCH_S2L
 	depends on AMBOOT_BOOT_DSP
 	bool "Configure to include Ambarella Preload IDSP Sys Data"
 	default n
@@ -21,10 +37,8 @@ config CONFIG_AMBARELLA_PRELOAD_IDSP
 		Configure to include Ambarella Preload IDSP Sys Data.
 
 config CONFIG_AMBARELLA_PRELOAD_ADC
-	depends on CONFIG_ARCH_S2L
-	depends on BUILD_AMBARELLA_APP_FASTBOOT_SMART3A
 	bool "Configure to include Ambarella Preload ADC partition Sys Data"
-	default y
+	depends on (CONFIG_ARCH_S2L || CONFIG_ARCH_S3L || CONFIG_ARCH_S5L)
+	default n
 	help
 		Configure to include Ambarella Preload ADC partition Sys Data.
-
diff --git a/preload_adc/arch_s2l/host_adcfw.c b/preload_adc/arch_s2l/host_adcfw.c
new file mode 100644
index 0000000..ee77a6d
--- /dev/null
+++ b/preload_adc/arch_s2l/host_adcfw.c
@@ -0,0 +1,348 @@
+/**
+ * prebuild/sys_data/preload_idsp/host_adcfw.c
+ *
+ * Author: Cao Rongrong <rrcao@ambarella.com>
+ *
+ * Copyright (c) 2016 Ambarella, Inc.
+ *
+ * This file and its contents ("Software") are protected by intellectual
+ * property rights including, without limitation, U.S. and/or foreign
+ * copyrights. This Software is also the confidential and proprietary
+ * information of Ambarella, Inc. and its licensors. You may not use, reproduce,
+ * disclose, distribute, modify, or otherwise prepare derivative works of this
+ * Software or any portion thereof except pursuant to a signed license agreement
+ * or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
+ * In the absence of such an agreement, you agree to promptly notify and return
+ * this Software to Ambarella, Inc.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
+ * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include <ctype.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <libgen.h>
+#include "config.h"
+#include "adc.h"
+#include "preset_3a_params.h"
+
+#if 0
+#define DSP_HOST_DBG(format, arg...)	fprintf(stdout, format , ## arg)
+#else
+#define DSP_HOST_DBG(format, arg...)
+#endif
+#define DSP_HOST_ERR(format, arg...)	fprintf(stderr, format , ## arg)
+
+#define ARRAY_SIZE(x)		(sizeof(x) / sizeof((x)[0]))
+#define BIN_ALIGN(x)		(((x) + 3) & ~3);
+
+#define DEFAULT_BINARY_IDSPCFG_OFFSET	(8208)
+#define IDSPCFG_BINARY_HEAD_SIZE			(64)
+
+typedef enum {
+	PARAM1_OUTPUT = 1,
+	PARAM1_IDSPCFG_PATH,
+	PARAM1_IDSPCFG_LIST,
+	PARAM1_END,
+	PARAM1_FIRST = PARAM1_OUTPUT,
+	PARAM1_LAST = PARAM1_IDSPCFG_LIST,
+} PARAM1_TYPE;
+
+/* ==========================================================================*/
+static int parse_line(const char *line, const char *prefix,
+		char *binfile, char *binname)
+{
+	const char *bofn = line;
+
+	*binfile = '\0';
+	*binname = '\0';
+
+	/* Skip white spaces */
+	while (*line != '\0' && isspace(*line)) {
+		line++;
+	}
+
+	/* Check for comment */
+	if (*line == '#' || *line == '\0') {
+		return 0;
+	}
+
+	/* Get 'binfile' */
+	if (prefix) {
+		binfile += sprintf(binfile, "%s/", prefix);
+	}
+	while (*line != '\0' && !isspace(*line) && *line != '#') {
+		if (*line == '/')
+			bofn = line;
+		*binfile++ = *line++;
+	}
+	*binfile = '\0';
+
+	if (*bofn == '/') {
+		bofn++;
+	}
+
+	/* Skip white spaces */
+	while (*line != '\0' && isspace(*line)) {
+		line++;
+	}
+
+	/* Check for comment */
+	if (*line == '#' || *line == '\0') {
+		while (*bofn != '\0' && !isspace(*bofn) && *bofn != '#') {
+			*binname++ = *bofn++;
+		}
+		*binname = '\0';
+		return 1;
+	}
+
+	/* Get 'binname' */
+	while (*line != '\0' && !isspace(*line) && *line != '#') {
+		*binname++ = *line++;
+	}
+	*binname = '\0';
+
+	/* Consume rest of line */
+	while (*line != '\0' && isspace(*line)) {
+		line++;
+	}
+
+	if (*line != '\0' && *line != '#') {
+		return -1;	/* Line has more than allowed # of args */
+	}
+
+	return 2;
+}
+
+static int fill_bin_file(FILE *foutput, FILE *fbin,
+		struct smart3a_file_info *pfile_info)
+{
+	int rval = 0;
+	int bin_size = 0;
+	size_t tmp_size = 0;
+	unsigned char buf[1024];
+
+	//snprintf(pfile_info->name, sizeof(pfile_info->name), "%s", binname);
+	//pfile_info->size = 0;
+	pfile_info->offset = ftell(foutput);
+	pfile_info->offset = BIN_ALIGN(pfile_info->offset);
+
+	rval = fseek(foutput, pfile_info->offset, SEEK_SET);
+	if (rval < 0) {
+		goto fill_bin_file_exit;
+	}
+
+	do {
+		tmp_size = fread(buf, 1, sizeof(buf), fbin);
+		if (tmp_size <= 0) {
+			rval = tmp_size;
+			break;
+		}
+		rval = fwrite(buf, 1, tmp_size, foutput);
+		if (rval == tmp_size)
+			bin_size += tmp_size;
+		else
+			rval = -1;
+	} while (rval > 0);
+
+	DSP_HOST_DBG("[%d: 0x%08X]\n", bin_size, pfile_info->offset);
+
+fill_bin_file_exit:
+	return bin_size;
+}
+
+static int fill_idspcfg_file(FILE *foutput, FILE *fidspcfg,
+		struct smart3a_file_info *pfile_info)
+{
+	int rval = 0;
+	size_t tmp_size;
+	unsigned char buf[1024];
+	int idspcfg_header = IDSPCFG_BINARY_HEAD_SIZE;
+
+	rval = fseek(foutput, pfile_info->offset + DEFAULT_BINARY_IDSPCFG_OFFSET, SEEK_SET);
+	if (rval < 0) {
+		goto fill_idspcfg_file_exit;
+	}
+
+	do {
+		tmp_size = fread(buf, 1, sizeof(buf), fidspcfg);
+		if (tmp_size <= 0) {
+			rval = tmp_size;
+			break;
+		}
+
+		tmp_size -= idspcfg_header;
+
+		rval = fwrite(&buf[idspcfg_header], 1, tmp_size , foutput);
+		if (rval == tmp_size) {
+			idspcfg_header = 0;
+		} else {
+			rval = -1;
+		}
+	} while (rval > 0);
+
+	DSP_HOST_DBG("Add idspcfg[%d]: %s[%d @ 0x%08X + 0x%08X]\n",
+		IDSPCFG_BINARY_HEAD_SIZE, pfile_info->name,
+		pfile_info->size, pfile_info->offset, DEFAULT_BINARY_IDSPCFG_OFFSET);
+
+fill_idspcfg_file_exit:
+	return rval;
+}
+
+/* ==========================================================================*/
+int main(int argc, char **argv)
+{
+	int rval = 0;
+	const char *output;
+	const char *idspcfg_path;
+	const char *idspcfg_list;
+
+	FILE *fidspcfg_list = NULL;
+	FILE *foutput = NULL;
+	int lineno;
+	char buf[512];
+	char binfile[512];
+	char binname[512];
+	FILE *fbin = NULL;
+	int entries;
+	struct adcfw_header hdr;
+
+	if ((argc != PARAM1_LAST) && (argc != PARAM1_END)) {
+		DSP_HOST_ERR("Usage: %s [adc.fw] [idspcfg_path] [idspcfg_list]\n", argv[0]);
+		rval = -EINVAL;
+		goto main_exit;
+	}
+
+	output = argv[PARAM1_OUTPUT];
+
+	idspcfg_path = argv[PARAM1_IDSPCFG_PATH];
+	idspcfg_list = argv[PARAM1_IDSPCFG_LIST];
+
+	fidspcfg_list = fopen(idspcfg_list, "r");
+	if (fidspcfg_list == NULL) {
+		DSP_HOST_ERR("Unable to open '%s' for input!\n", idspcfg_list);
+		rval = -EINVAL;
+		goto main_exit;
+	}
+
+       /* Smart 3A */
+        foutput = fopen(output, "wb");
+	if (foutput == NULL) {
+        	DSP_HOST_ERR("Unable to open '%s' for output!\n", output);
+        	rval = -EINVAL;
+        	goto main_exit;
+	}
+
+	rval = fseek(foutput, sizeof(struct adcfw_header), SEEK_SET);
+	if (rval < 0) {
+		DSP_HOST_ERR("fseek(%s) = %d\n", output, rval);
+		goto main_exit;
+	}
+
+        memset(&hdr, 0, sizeof(struct adcfw_header));
+        entries = 0;
+        /*IDSP cfg */
+	for (lineno = 1; fgets(buf, sizeof(buf), fidspcfg_list) != NULL; lineno++) {
+		rval = parse_line(buf, idspcfg_path, binfile, binname);
+		if (rval < 0) {
+			DSP_HOST_ERR("line %d looks suspicious! ignored...\n",
+				lineno);
+			continue;
+		}
+		if (rval == 0) {
+			/* Line is pure comment */
+			continue;
+		}
+		if (entries >= ARRAY_SIZE(hdr.smart3a)) {
+			DSP_HOST_ERR("Too many fidspcfg files! ignore[%s]\n", binfile);
+			continue;
+		}
+
+		fbin = fopen(binfile, "rb");
+		if (fbin == NULL) {
+			DSP_HOST_ERR("Error: unable to open '%s'", binfile);
+			rval = -EINVAL;
+			goto main_exit;
+		}
+
+		DSP_HOST_DBG("IDSPCfg: process[%s]\n", binfile);
+		/* first use preset 3a params */
+		hdr.smart3a[entries] = preset_3a_params[entries];
+		/* then fill idsp config to output bin */
+		rval = fill_bin_file(foutput, fbin, &hdr.smart3a[entries]);
+		if (rval < 0) {
+			DSP_HOST_ERR("Error: fill_bin_file(%s) = %d", binfile, rval);
+			goto main_exit;
+		}
+
+		fclose(fbin);
+		fbin = NULL;
+		entries++;
+	}
+
+	hdr.smart3a_num = entries;
+	hdr.smart3a_size = rval;
+
+#if defined(CONFIG_BSP_BOARD_S2LM_ELEKTRA)
+	hdr.params_in_amboot.enable_audio = 0;
+	hdr.params_in_amboot.enable_fastosd = 0;
+	hdr.params_in_amboot.enable_ldc = 0;
+	hdr.params_in_amboot.rotation_mode = 0;
+	hdr.params_in_amboot.stream0_enable = 1; //enable
+	hdr.params_in_amboot.stream0_resolution = 0; //1080p
+	hdr.params_in_amboot.stream0_fmt = 1; //h264
+	hdr.params_in_amboot.stream0_fps = 30;
+	hdr.params_in_amboot.stream0_bitrate = 2000000;
+	hdr.params_in_amboot.stream1_enable = 0;
+	hdr.params_in_amboot.stream1_resolution = 2; //480p
+	hdr.params_in_amboot.stream1_fmt = 1; //h264
+	hdr.params_in_amboot.stream1_fps = 30;
+	hdr.params_in_amboot.stream1_bitrate = 1000000;
+	snprintf(hdr.params_in_amboot.fastosd_string, sizeof(hdr.params_in_amboot.fastosd_string), "AMBA");
+	hdr.params_in_amboot.enable_vca= 0;
+	hdr.params_in_amboot.vca_frame_num= 15;
+#endif
+	hdr.magic = ADCFW_IMG_MAGIC;
+	hdr.fw_size = ftell(foutput);
+
+	rval = fseek(foutput, 0, SEEK_SET);
+	if (rval < 0) {
+		DSP_HOST_ERR("Error: HEAD fseek(%s) = %d\n", output, rval);
+		goto main_exit;
+	}
+	rval = fwrite(&hdr, 1, sizeof(struct adcfw_header), foutput);
+	if (rval != sizeof(struct adcfw_header)) {
+		DSP_HOST_ERR("Error: HEAD fwrite(%s) = %d\n", output, rval);
+		goto main_exit;
+	}
+	rval = 0;
+
+main_exit:
+	if (fidspcfg_list != NULL) {
+		fclose(fidspcfg_list);
+		fidspcfg_list = NULL;
+	}
+	if (foutput != NULL) {
+		fclose(foutput);
+		foutput = NULL;
+	}
+	if (fbin != NULL) {
+		fclose(fbin);
+		fbin = NULL;
+	}
+
+	return rval;
+}
diff --git a/preload_adc/arch_s2l/imx322_idspcfg.list b/preload_adc/arch_s2l/imx322_idspcfg.list
new file mode 100644
index 0000000..4d601e5
--- /dev/null
+++ b/preload_adc/arch_s2l/imx322_idspcfg.list
@@ -0,0 +1,5 @@
+imx322_0.bin
+imx322_1.bin
+imx322_2.bin
+imx322_3.bin
+imx322_4.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/imx322_idspcfg_mode4.list b/preload_adc/arch_s2l/imx322_idspcfg_mode4.list
new file mode 100644
index 0000000..2709e2f
--- /dev/null
+++ b/preload_adc/arch_s2l/imx322_idspcfg_mode4.list
@@ -0,0 +1,5 @@
+imx322_mode4_0.bin
+imx322_mode4_1.bin
+imx322_mode4_2.bin
+imx322_mode4_3.bin
+imx322_mode4_4.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/imx322_idspcfg_mode4_elektra.list b/preload_adc/arch_s2l/imx322_idspcfg_mode4_elektra.list
new file mode 100644
index 0000000..b917009
--- /dev/null
+++ b/preload_adc/arch_s2l/imx322_idspcfg_mode4_elektra.list
@@ -0,0 +1,4 @@
+#day mode
+imx322_mode4_elektra_0.bin
+#night mode
+imx322_mode4_elektra_1.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/make.inc b/preload_adc/arch_s2l/make.inc
new file mode 100644
index 0000000..3883762
--- /dev/null
+++ b/preload_adc/arch_s2l/make.inc
@@ -0,0 +1,80 @@
+##
+## prebuild/sys_data/preload_adc/arch_s2l/make.inc
+##
+## History:
+##    2015/01/21 - [Roy Su] Created file
+##
+## Copyright (c) 2016 Ambarella, Inc.
+##
+## This file and its contents ("Software") are protected by intellectual
+## property rights including, without limitation, U.S. and/or foreign
+## copyrights. This Software is also the confidential and proprietary
+## information of Ambarella, Inc. and its licensors. You may not use, reproduce,
+## disclose, distribute, modify, or otherwise prepare derivative works of this
+## Software or any portion thereof except pursuant to a signed license agreement
+## or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
+## In the absence of such an agreement, you agree to promptly notify and return
+## this Software to Ambarella, Inc.
+##
+## THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+## INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
+## MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+## IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
+## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+## LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
+## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+## POSSIBILITY OF SUCH DAMAGE.
+##
+
+ifeq ($(CONFIG_BSP_BOARD_S2LM_ELEKTRA), y)
+
+ifeq ($(CONFIG_S2LMELEKTRA_ENABLE_ADVANCED_ISO_MODE),y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg_mode4_elektra.list
+else
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg.list
+endif
+
+else ifeq ($(CONFIG_BSP_BOARD_S2LM_KIWI), y)
+
+ifeq ($(CONFIG_S2LMKIWI_ENABLE_ADVANCED_ISO_MODE),y)
+
+ifeq ($(CONFIG_ISO_TYPE_MIDDLE),y)
+
+ifeq ($(CONFIG_S2LMKIWI_SENSOR_IMX322), y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg_mode4.list
+else ifeq ($(CONFIG_S2LMKIWI_SENSOR_OV2732_MIPI), y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/ov2732_idspcfg_mode4_mliso.list
+else
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/ov4689_idspcfg_mode4_mliso.list
+endif
+
+else ifeq ($(CONFIG_ISO_TYPE_ADVANCED),y)
+
+ifeq ($(CONFIG_S2LMKIWI_SENSOR_IMX322), y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg_mode4.list
+else
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/ov4689_idspcfg_mode4_aliso.list
+endif
+
+endif
+
+else
+
+ifeq ($(CONFIG_S2LMKIWI_SENSOR_IMX322), y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg.list
+else
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/ov4689_idspcfg_mode0.list
+endif
+
+endif
+
+else ifeq ($(CONFIG_BSP_BOARD_S2LM_ELEKTRA_ORYX), y)
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/imx322_idspcfg_mode4.list
+else
+
+IDSPCFG_LIST	:= $(IDSPCFG_DIR)/ov4689_idspcfg_mode0.list
+
+endif
diff --git a/preload_adc/arch_s2l/ov4689_idspcfg_mode0.list b/preload_adc/arch_s2l/ov4689_idspcfg_mode0.list
new file mode 100644
index 0000000..1335cd7
--- /dev/null
+++ b/preload_adc/arch_s2l/ov4689_idspcfg_mode0.list
@@ -0,0 +1 @@
+ov4689_mode0_0.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/ov4689_idspcfg_mode4_aliso.list b/preload_adc/arch_s2l/ov4689_idspcfg_mode4_aliso.list
new file mode 100644
index 0000000..521671d
--- /dev/null
+++ b/preload_adc/arch_s2l/ov4689_idspcfg_mode4_aliso.list
@@ -0,0 +1 @@
+ov4689_mode4_aliso_0.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/ov4689_idspcfg_mode4_mliso.list b/preload_adc/arch_s2l/ov4689_idspcfg_mode4_mliso.list
new file mode 100644
index 0000000..4d34a8b
--- /dev/null
+++ b/preload_adc/arch_s2l/ov4689_idspcfg_mode4_mliso.list
@@ -0,0 +1 @@
+ov4689_mode4_mliso_0.bin
\ No newline at end of file
diff --git a/preload_adc/arch_s2l/preset_3a_params.h b/preload_adc/arch_s2l/preset_3a_params.h
new file mode 100644
index 0000000..7c063cb
--- /dev/null
+++ b/preload_adc/arch_s2l/preset_3a_params.h
@@ -0,0 +1,243 @@
+/**
+ * prebuild/sys_data/preload_adc/arch_s2l/preset_3a_params.h
+ *
+ *
+ * Copyright (c) 2016 Ambarella, Inc.
+ *
+ * This file and its contents ("Software") are protected by intellectual
+ * property rights including, without limitation, U.S. and/or foreign
+ * copyrights. This Software is also the confidential and proprietary
+ * information of Ambarella, Inc. and its licensors. You may not use, reproduce,
+ * disclose, distribute, modify, or otherwise prepare derivative works of this
+ * Software or any portion thereof except pursuant to a signed license agreement
+ * or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
+ * In the absence of such an agreement, you agree to promptly notify and return
+ * this Software to Ambarella, Inc.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
+ * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PRESET_3A_PARAMS__
+#define __PRESET_3A_PARAMS__
+
+#include "adc.h"
+/* layout of struct smart3a_file_info is as follows:
+**    offset: unsigned int
+**    r_gain, b_gain, d_gain, shutter, agc:  unsigned int
+**    para0, para1, para2, para3, para4:    unsigned char
+**    rev[3]: unsigned char
+**
+*/
+static struct smart3a_file_info preset_3a_params[]={
+#if (defined(CONFIG_BOARD_VERSION_S2LMELEKTRA_OV4689_S2L22M)	\
+	|| defined (CONFIG_BOARD_VERSION_S2LMELEKTRA_OV4689_S2L55M))
+	[0] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x00,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[1] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x00,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[2] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x00,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[3] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x00,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[4] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x00,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+#elif (defined (CONFIG_BOARD_VERSION_S2LM_ELEKTRA_ORYX_IMX322_S2L55M) \
+		|| defined (CONFIG_BOARD_VERSION_S2LM_ELEKTRA_ORYX_IMX322_S2L22M) \
+		|| defined (CONFIG_S2LMKIWI_SENSOR_IMX322))
+  [0] = {
+		.r_gain = 7600,
+		.b_gain = 6096,
+		.d_gain = 3978,
+		.shutter = 562,
+		.agc = 55,
+		.para0 = 0x02,
+		.para1 = 0x34,
+		.para2 = 0x37,
+	},
+	[1] = {
+		.r_gain = 6012,
+		.b_gain = 9992,
+		.d_gain = 4051,
+		.shutter = 562,
+		.agc = 53,
+		.para0 = 0x02,
+		.para1 = 0x34,
+		.para2 = 0x35,
+	},
+	[2] = {
+		.r_gain = 5956,
+		.b_gain = 9732,
+		.d_gain = 4061,
+		.shutter = 562,
+		.agc = 1,
+		.para0 = 0x02,
+		.para1 = 0x34,
+		.para2 = 0x01,
+	},
+	[3] = {
+		.r_gain = 6068,
+		.b_gain = 9404,
+		.d_gain = 4046,
+		.shutter = 281,
+		.agc = 7,
+		.para0 = 0x03,
+		.para1 = 0x4d,
+		.para2 = 0x07,
+	},
+	[4] = {
+		.r_gain = 5348,
+		.b_gain = 10740,
+		.d_gain = 4129,
+		.shutter = 562,
+		.agc = 10,
+		.para0 = 0x03,
+		.para1 = 0x14,
+		.para2 = 0x1d,
+	},
+#elif (defined (CONFIG_BOARD_VERSION_S2LMELEKTRA_IMX322_S2L22M)	\
+		|| defined (CONFIG_BOARD_VERSION_S2LMELEKTRA_IMX322_S2L55M))
+	[0] = {
+		.r_gain = 6068,
+		.b_gain = 9404,
+		.d_gain = 4046,
+		.shutter = 281,
+		.agc = 7,
+		.para0 = 0x03,
+		.para1 = 0x4d,
+		.para2 = 0x07,
+	},
+	[1] = {
+		.r_gain = 6012,
+		.b_gain = 9992,
+		.d_gain = 4051,
+		.shutter = 1125,
+		.agc = 95,
+		.para0 = 0x00,
+		.para1 = 0x00,
+		.para2 = 0x5f,
+	},
+#else
+	[0] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x04,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[1] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x04,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[2] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x04,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[3] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x04,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+	[4] = {
+		.r_gain = 6400,
+		.b_gain = 10000,
+		.d_gain = 4096,
+		.shutter = 1500,
+		.agc = 60,
+		.para0 = 0x00,
+		.para1 = 0x60,
+		.para2 = 0x04,
+		.para3 = 0x00,
+		.para4 = 0x80
+	},
+#endif
+};
+#endif
diff --git a/preload_adc/make.inc b/preload_adc/make.inc
index 2fe1e03..81a4176 100644
--- a/preload_adc/make.inc
+++ b/preload_adc/make.inc
@@ -1,16 +1,34 @@
-##
-## prebuild/imgproc/img_data/arch_s2l/preload_idsp/make.inc
-##
-## History:
-##    2015/01/21 - [Roy Su] Created file
-##
-## Copyright (C) 2012-2016, Ambarella, Inc.
-##
-## All rights reserved. No Part of this file may be reproduced, stored
-## in a retrieval system, or transmitted, in any form, or by any means,
-## electronic, mechanical, photocopying, recording, or otherwise,
-## without the prior consent of Ambarella, Inc.
-##
+################################################################################
+ #  prebuild/sys_data/preload_adc/make.inc
+ #
+ # History:
+ #    2016/01/15 - [Tao Wu] Created file
+ #
+ # Copyright (c) 2016 Ambarella, Inc.
+ #
+ # This file and its contents ( "Software" ) are protected by intellectual
+ # property rights including, without limitation, U.S. and/or foreign
+ # copyrights. This Software is also the confidential and proprietary
+ # information of Ambarella, Inc. and its licensors. You may not use, reproduce,
+ # disclose, distribute, modify, or otherwise prepare derivative works of this
+ # Software or any portion thereof except pursuant to a signed license agreement
+ # or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
+ # In the absence of such an agreement, you agree to promptly notify and return
+ # this Software to Ambarella, Inc.
+ #
+ # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ # INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
+ # MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ # IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
+ # INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ # (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ # LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
+ # INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ # CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ # POSSIBILITY OF SUCH DAMAGE.
+ #
+################################################################################
 
 ifeq ($(CONFIG_AMBARELLA_PRELOAD_ADC), y)
 
@@ -22,14 +40,19 @@ include $(CLEAR_VARS)
 
 HOST_CC	:= gcc
 HOST_ADCFW	:= host_adcfw
-HOST_SRC1 	:= $(PRELOAD_ADC_PATH)/$(HOST_ADCFW).c
-HOST_CFLAGS 	:= -I$(AMB_TOPDIR)/amboot/include -I$(AMB_BOARD_DIR)
+HOST_SRC1	:= $(PRELOAD_ADC_PATH)/arch_$(AMBARELLA_ARCH)/$(HOST_ADCFW).c
+HOST_CFLAGS	:= -I$(AMB_TOPDIR)/amboot/include -I$(AMB_BOARD_DIR) \
+				-I$(PRELOAD_ADC_PATH)/arch_$(AMBARELLA_ARCH)
 
 ADCFW_OUT_DIR	:= $(AMB_BOARD_OUT)/prebuild/sys_data
 ADCFW_OUT	:= $(ADCFW_OUT_DIR)/adc.bin
-IDSPCFG_DIR	:= $(PRELOAD_ADC_PATH)
-IDSPCFG_LIST 	:= $(PRELOAD_ADC_PATH)/idspcfg.list
-############################
+IDSPCFG_DIR	:= $(PRELOAD_ADC_PATH)/arch_$(AMBARELLA_ARCH)
+
+include $(IDSPCFG_DIR)/make.inc
+
+ifndef IDSPCFG_LIST
+$(error IDSPCFG_LIST is not defined. Please specify your AMBARELLA_ARCH.)
+endif
 
 LOCAL_TARGET	:= preload_adc
 
@@ -44,6 +67,4 @@ $(LOCAL_TARGET):
 	@echo "Build $@ Done."
 
 $(call add-target-into-build, $(LOCAL_TARGET))
-
-endif
-
+endif
\ No newline at end of file
